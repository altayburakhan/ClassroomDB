@page
@model ClassroomSystem.Pages.Admin.ClassroomsModel
@{
    ViewData["Title"] = "Classroom Management";
    Layout = "_AdminLayout";
}

<div class="row mb-4">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h4 class="mb-0">Classroom Management</h4>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item"><a href="/Admin">Admin</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Classrooms</li>
                    </ol>
                </nav>
            </div>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addClassroomModal">
                <i class="mdi mdi-plus"></i> Add New Classroom
            </button>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        @if (!ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <ul>
                    @foreach (var error in ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-centered table-nowrap table-hover mb-0">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Building</th>
                                <th>Floor</th>
                                <th>Capacity</th>
                                <th>Features</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.Classrooms != null && Model.Classrooms.Any())
                            {
                                @foreach (var classroom in Model.Classrooms)
                                {
                                    <tr>
                                        <td>@classroom.Id</td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="avatar-sm rounded bg-info bg-opacity-10 me-2">
                                                    <span class="avatar-title rounded">
                                                        <i class="mdi mdi-office-building font-20 text-info"></i>
                                                    </span>
                                                </div>
                                                <div>
                                                    <h5 class="mb-0">@classroom.Name</h5>
                                                    <small class="text-muted">Room @classroom.RoomNumber</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>@classroom.Building</td>
                                        <td>@classroom.Floor</td>
                                        <td>@classroom.Capacity seats</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(classroom.Features))
                                            {
                                                foreach (var feature in classroom.Features.Split(','))
                                                {
                                                    <span class="badge bg-primary me-1">@feature.Trim()</span>
                                                }
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-@(classroom.IsAvailable ? "success" : "danger")">
                                                @(classroom.IsAvailable ? "Available" : "In Use")
                                            </span>
                                        </td>
                                        <td>
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-light btn-sm" data-bs-toggle="modal" data-bs-target="#editClassroomModal" data-classroom-id="@classroom.Id">
                                                    <i class="mdi mdi-pencil"></i>
                                                </button>
                                                <button type="button" class="btn btn-light btn-sm" onclick="deleteClassroom(@classroom.Id)">
                                                    <i class="mdi mdi-delete"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Classroom Modal -->
<div class="modal fade" id="addClassroomModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Classroom</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form method="post" asp-page-handler="AddClassroom">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Room Number</label>
                        <input type="text" class="form-control" name="roomNumber" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Building</label>
                        <input type="text" class="form-control" name="building" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Floor</label>
                        <input type="number" class="form-control" name="floor" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Capacity</label>
                        <input type="number" class="form-control" name="capacity" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Features (comma-separated)</label>
                        <input type="text" class="form-control" name="features" placeholder="Projector, Whiteboard, AC">
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" name="isAvailable" value="true" id="addIsAvailable">
                            <input type="hidden" name="isAvailable" value="false" />
                            <label class="form-check-label" for="addIsAvailable">Available</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Classroom</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Classroom Modal -->
<div class="modal fade" id="editClassroomModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Classroom</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form method="post" asp-page-handler="UpdateClassroom">
                <input type="hidden" name="Id" id="editClassroomId">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" name="Name" id="editName" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Room Number</label>
                        <input type="text" class="form-control" name="RoomNumber" id="editRoomNumber" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Building</label>
                        <input type="text" class="form-control" name="Building" id="editBuilding" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Floor</label>
                        <input type="number" class="form-control" name="Floor" id="editFloor" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Capacity</label>
                        <input type="number" class="form-control" name="Capacity" id="editCapacity" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Features (comma-separated)</label>
                        <input type="text" class="form-control" name="Features" id="editFeatures" placeholder="Projector, Whiteboard, AC">
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" name="IsAvailable" id="editIsAvailable">
                            <label class="form-check-label">Available</label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Handle edit classroom modal
        const editClassroomModal = document.getElementById('editClassroomModal');
        editClassroomModal.addEventListener('show.bs.modal', function (event) {
            const button = event.relatedTarget;
            const classroomId = parseInt(button.getAttribute('data-classroom-id'));
            const classrooms = @Html.Raw(Json.Serialize(Model.Classrooms));
            const classroom = classrooms.find(c => c.id === classroomId);
            
            if (classroom) {
                document.getElementById('editClassroomId').value = classroom.id;
                document.getElementById('editName').value = classroom.name;
                document.getElementById('editRoomNumber').value = classroom.roomNumber;
                document.getElementById('editBuilding').value = classroom.building;
                document.getElementById('editFloor').value = classroom.floor;
                document.getElementById('editCapacity').value = classroom.capacity;
                document.getElementById('editFeatures').value = classroom.features;
                document.getElementById('editIsAvailable').checked = classroom.isAvailable;
            }
        });

        // Handle delete classroom
        function deleteClassroom(classroomId) {
            if (confirm('Are you sure you want to delete this classroom?')) {
                fetch(`/Admin/Classrooms?handler=Delete&classroomId=${classroomId}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                }).then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else {
                        alert('Failed to delete classroom');
                    }
                });
            }
        }
    </script>
} 