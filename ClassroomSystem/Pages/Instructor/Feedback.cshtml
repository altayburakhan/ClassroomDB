@page
@model ClassroomSystem.Pages.Instructor.FeedbackModel
@{
    ViewData["Title"] = "Feedback & Contact";
    Layout = "Instructor/_Layout";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3">Feedback & Contact</h1>
    </div>

    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>@TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>@TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">Submit Feedback</h5>
                </div>
                <div class="card-body">
                    <form method="post" id="feedbackForm">
                        @Html.AntiForgeryToken()
                        <div class="mb-3">
                            <label class="form-label">Classroom</label>
                            <select class="form-select" name="classroomId" required>
                                <option value="">Select Classroom</option>
                                @foreach (var classroom in Model.Classrooms)
                                {
                                    <option value="@classroom.Id">@classroom.Name</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Rating</label>
                            <div class="star-rating">
                                <input type="radio" id="star5" name="rating" value="5" />
                                <label for="star5" title="5 stars"><i class="fas fa-star"></i></label>
                                <input type="radio" id="star4" name="rating" value="4" />
                                <label for="star4" title="4 stars"><i class="fas fa-star"></i></label>
                                <input type="radio" id="star3" name="rating" value="3" />
                                <label for="star3" title="3 stars"><i class="fas fa-star"></i></label>
                                <input type="radio" id="star2" name="rating" value="2" />
                                <label for="star2" title="2 stars"><i class="fas fa-star"></i></label>
                                <input type="radio" id="star1" name="rating" value="1" />
                                <label for="star1" title="1 star"><i class="fas fa-star"></i></label>
                            </div>
                            <div class="invalid-feedback">Please select a rating</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Comment</label>
                            <textarea class="form-control" name="comment" rows="4" required 
                                    placeholder="Please provide your feedback about the classroom..."></textarea>
                        </div>

                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-paper-plane me-2"></i>Submit Feedback
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">My Previous Feedback</h5>
                </div>
                <div class="card-body">
                    @if (Model.PreviousFeedback != null && Model.PreviousFeedback.Any())
                    {
                        <div class="list-group">
                            @foreach (var feedback in Model.PreviousFeedback)
                            {
                                <div class="list-group-item">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <h6 class="mb-0">@feedback.Classroom?.Name</h6>
                                        <small class="text-muted">@feedback.CreatedAt.ToString("g")</small>
                                    </div>
                                    <div class="mb-2 star-display">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <i class="fas fa-star @(i <= feedback.Rating ? "text-warning" : "text-secondary")"></i>
                                        }
                                    </div>
                                    <p class="mb-1">@feedback.Comment</p>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info mb-0">
                            <i class="fas fa-info-circle me-2"></i>
                            You haven't submitted any feedback yet.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .star-rating {
            display: flex;
            flex-direction: row-reverse;
            justify-content: flex-start;
            gap: 4px;
        }

        .star-rating input {
            display: none;
        }

        .star-rating label {
            cursor: pointer;
            font-size: 1.5rem;
            color: #ddd;
            transition: color 0.2s ease-in-out;
        }

        .star-rating label:hover,
        .star-rating label:hover ~ label,
        .star-rating input:checked ~ label {
            color: #ffc107;
        }

        .star-display {
            font-size: 1.2rem;
        }

        .star-display .fa-star {
            margin-right: 2px;
        }

        .text-secondary {            color: #6c757d !important;        }

        .list-group-item {
            transition: background-color 0.2s ease-in-out;
        }

        .list-group-item:hover {
            background-color: #f8f9fa;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('feedbackForm');
            const ratingInputs = form.querySelectorAll('input[name="rating"]');
            
            // Form validation
            form.addEventListener('submit', function(e) {
                let isRatingSelected = Array.from(ratingInputs).some(input => input.checked);
                
                if (!isRatingSelected) {
                    e.preventDefault();
                    document.querySelector('.star-rating').nextElementSibling.style.display = 'block';
                    return false;
                }
                
                // Disable submit button to prevent double submission
                const submitButton = form.querySelector('button[type="submit"]');
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Submitting...';
            });

            // Clear validation message when rating is selected
            ratingInputs.forEach(input => {
                input.addEventListener('change', function() {
                    document.querySelector('.star-rating').nextElementSibling.style.display = 'none';
                });
            });
        });
    </script>
} 